{"version":3,"file":"static/js/776.5df29d9a.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","components/UserMenu/UserMenu.jsx","pages/Contacts.jsx"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectFilter, selectContacts],\n  (filter, contacts) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formButton\":\"ContactForm_formButton__TN6Jq\"};","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport Notiflix from 'notiflix';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const prevContacts = useSelector(selectContacts);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameChange = e => {\n    setName(e.target.value);\n  };\n\n  const numberChange = e => {\n    setNumber(e.target.value);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const findContactNumber = (contacts, number) => {\n    return contacts.find(\n      contact => contact.number.replace(/[^\\d]/g, '') === number\n    );\n  };\n\n  const findContactName = (contacts, name) => {\n    return contacts.find(contact => contact.name.toLowerCase() === name);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const onlyNumber =number.replace(/[^\\d]/g, '');\n    const checkNumber = findContactNumber(prevContacts, onlyNumber);\n    const lowerName = name.toLowerCase();\n    const checkName = findContactName(prevContacts, lowerName);\n    const contact = { name, number };\n    if (!checkNumber && !checkName) {\n      dispatch(addContact(contact));\n    } else if (checkName) {\n      Notiflix.Notify.info(`${name} is already in contacts.`);\n    } else if (checkNumber) {\n      Notiflix.Notify.info(`${number} is already in contacts.`);\n    }\n    reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameInputId}>Name</label>\n      <input\n        id={nameInputId}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        onChange={nameChange}\n        required\n      />\n      <label htmlFor={numberInputId}>Number</label>\n      <input\n        id={numberInputId}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        onChange={numberChange}\n        required\n      />\n      <button className={css.formButton} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"contact\":\"ContactList_contact__0STHS\",\"contactButton\":\"ContactList_contactButton__QiycO\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n\n  const handleClick = e => {\n    dispatch(deleteContact(e.target.id));\n  };\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(contact => {\n        return (\n          <li className={css.contact} key={nanoid()}>\n            <div>\n              {contact.name}: {contact.phone}\n            </div>\n            <button\n              className={css.contactButton}\n              type=\"button\"\n              id={contact.id}\n              onClick={handleClick}\n            >\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__1Cysk\"};","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { addFilter } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFinding = e => {\n    const inputValue = e.target.value;\n    const lowerValue = inputValue.toLowerCase();\n    dispatch(addFilter(lowerValue));\n  };\n\n  const filterInputId = nanoid();\n  return (\n    <>\n      <label htmlFor={filterInputId}>Find contacts by name</label>\n      <input\n        id={filterInputId}\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        title=\"Find contact by name\"\n        onChange={handleFinding}\n      ></input>\n    </>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { useSelector } from 'react-redux/es/hooks/useSelector';\nimport { selectUser } from 'redux/auth/selectors';\n\nconst UserMenu = () => {\n  const { email } = useSelector(selectUser);\n\n  return (\n    <div>\n      <p>{email}</p>\n      <button>Logout</button>\n    </div>\n  );\n};\n\nexport default UserMenu;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport UserMenu from 'components/UserMenu/UserMenu';\n\nconst Contacts = () => {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <UserMenu />\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading ? <div>Loading...</div> : <ContactList />}\n      {error && <div>Something go wrong... Try again!</div>}\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","createSelector","contact","name","toLowerCase","includes","dispatch","useDispatch","prevContacts","useSelector","useState","setName","number","setNumber","nameInputId","nanoid","numberInputId","className","css","onSubmit","e","preventDefault","onlyNumber","replace","checkNumber","find","findContactNumber","lowerName","checkName","findContactName","Notiflix","addContact","htmlFor","id","type","value","pattern","title","onChange","target","required","handleClick","deleteContact","filteredContacts","map","phone","onClick","filterInputId","lowerValue","addFilter","email","selectUser","useEffect","fetchContacts"],"sourceRoot":""}